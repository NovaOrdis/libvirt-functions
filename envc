#!/bin/bash

[ -f $(dirname $0)/../libvirt-functions/libvirt-functions ] && . $(dirname $0)/../libvirt-functions/libvirt-functions || { echo "$(dirname $0)/../libvirt-functions/libvirt-functions not found" 1>&2; exit 1; }

guests="in appproxy support master1 master2 master3 infranode1 infranode2 node1 node2"

function main() {

    local command=$1

    [ -z "${command}" ] && {

        echo "[error]: a command must be specified" 1>&2;
        echo "available commands:" 1>&2;
        echo " start" 1>&2;
        echo " stop [vmid]" 1>&2;
        echo " status" 1>&2;
        echo " snapshot" 1>&2;
        echo " list-snapshots" 1>&2;
        exit 1;
    }

    if [ "${command}" = "start" ]; then
        start;
    elif [ "${command}" = "stop" ]; then
        stop $2;
    elif [ "${command}" = "status" ]; then
        status;
    elif [ "${command}" = "snapshot" ]; then
        snapshot $2;
    elif [ "${command}" = "list-snapshots" ]; then
        list-snapshots;
    else
        echo "[error]: unknown command '${command}'" 1>&2;
        exit 1;
    fi
}

function start() {

   echo "starting ..."

    for i in ${guests}; do
        virsh start ${i} || { echo "failed to start guest '${i}'" 1>&2; exit 1; }
    done

}

function stop() {

    local vmid=$1

    echo -n "stopping "; [ -z "${vmid}" ] && echo "all ..." || echo "$(vmid-to-guest-name ${vmid}) ..."

    [ -n "${vmid}" ] && guests="$(vmid-to-guest-name ${vmid})"
    [ -z "${guests}" ] && exit 1

    for i in ${guests}; do
        virsh shutdown ${i} || { echo "failed to shut down guest '${i}'" 1>&2; exit 1; }
    done

}

function status() {

    for i in ${guests}; do
        local state
        state=$(virsh domstate ${i}) || exit 1
        echo "${i}: ${state}"
    done
}

#
# Snapshots all qcow2 images of the environment.
#
function snapshot() {

    local snapshot_tag=$1

    [ -z "${snapshot_tag}" ] && { echo "[error]: a snapshot tag must be specified" 1>&2; exit 1; }

    # make sure all guests are down. If at least one is up, fail

    for i in ${guests}; do
        local state
        state=$(virsh domstate ${i}) || exit 1
        if [ "${state}" != "shut off" ]; then
           echo "'${i}' is not shut down, cannot snapshot environment" 1>&2
           exit 1
        fi
    done

    # list the qcow2 images

    for i in ${guests}; do
        local image_volume=/main-storage-pool/${i}.qcow2
        virsh vol-info ${image_volume} || { echo "failed to query ${image_volume}" 1>&2; exit 1; }
    done

    # snapshot all qcow2 images

    for i in ${guests}; do
        local image_volume=/main-storage-pool/${i}.qcow2
        qemu-img snapshot -c ${snapshot_tag} ${image_volume} && echo "'${snapshot_tag}' applied to ${image_volume}" || exit 1
    done
}

#
# List disk image snapshots
#
function list-snapshots() {

    echo ""

    for i in ${guests}; do
        local image_volume=/main-storage-pool/${i}.qcow2
        echo "Virtual machine: ${i}, image volume: ${image_volume}"
        qemu-img snapshot -l ${image_volume} || exit 1
        echo ""
    done
}

#
# translation functions
#

#
# translates vmids to guest names (example: i to in, m1 to master1, etc.)
#
function vmid-to-guest-name() {

    local vmid=$1

    [ -z "${vmid}" ] && { echo "vmid-to-guest-name(): missing vmid" 1>&2; exit 1; }

    if [ "${vmid}" = "i" ]; then
        echo "in"
    elif [ "${vmid}" = "a" ]; then
        echo "appproxy"
    elif [ "${vmid}" = "s" ]; then
        echo "support"
    elif [ "${vmid}" = "m1" ]; then
        echo "master1"
    elif [ "${vmid}" = "m2" ]; then
        echo "master2"
    elif [ "${vmid}" = "m3" ]; then
        echo "master3"
    elif [ "${vmid}" = "i1" ]; then
        echo "infranode1"
    elif [ "${vmid}" = "i2" ]; then
        echo "infranode2"
    elif [ "${vmid}" = "n1" ]; then
        echo "node1"
    elif [ "${vmid}" = "n2" ]; then
        echo "node2"
    else
        echo "vmid-to-guest-name(): unknown vmid '${vmid}'" 1>&2
        exit 1
    fi
}

main $@




